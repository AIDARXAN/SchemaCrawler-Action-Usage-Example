name: SchemaCrawler Job to Create Schema Diagram

on:
  push:
    branches:
      - main
      - stage
      - dev
#    paths:
#      - '**/migrations/**.py'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      migrations: ${{ steps.filter.outputs.migrations }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            migrations:
              - '**/migrations/**'

  schemacrawler-job:
    runs-on: ubuntu-latest
    needs:
      - changes
    if: ${{ github.ref == 'refs/heads/dev' && needs.changes.outputs.migrations == 'true' }}
    name: SchemaCrawler Job to Create Schema Diagram
    steps:
      - id: checkout
        name: Checkout repository
        uses: actions/checkout@v2

      - id: schemacrawler
        name: Run SchemaCrawler Action with specified command-line
        uses: schemacrawler/SchemaCrawler-Action@v16.16.3
        with:
          entrypoint: /schemacrawler.sh
          args: --server=postgresql --database=compliance-platform-dev --host=${{ secrets.HOST }} --user:env USER --password:env PASSWORD --output-file database-diagram.svg --info-level=standard --command=schema --log-level=CONFIG --title "Secjure database"
        env:
          USER: ${{ secrets.USER }}
          PASSWORD: ${{ secrets.PASSWORD }}

      - id: upload-database-diagram
        name: Upload SchemaCrawler database diagram
        uses: actions/upload-artifact@v2
        with:
          name: database-diagram
          path: database-diagram.svg

      - uses: actions/download-artifact@v2
        with:
          path: ./
      - uses: eine/tip@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'development'
          files: |
            ./database-diagram.svg

      - id: check-success
        name: Fail the entire job if SchemaCrawler run failed
        run: |
          [ ${{ steps.schemacrawler.outputs.exit_status }} -eq 0 ] && echo "SchemaCrawler run succeeded" || echo "SchemaCrawler run failed"
          [ ${{ steps.schemacrawler.outputs.exit_status }} -eq 0 ] || exit 1

